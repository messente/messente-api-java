buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.+'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'
        classpath 'com.diffplug.spotless:spotless-plugin-gradle:6.3.0'
    }
}

plugins {
    id "java-library"
    id "maven-publish"
    id "signing"
    id("io.github.gradle-nexus.publish-plugin") version "2.0.0"
}

apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'java'
apply plugin: 'com.diffplug.spotless'

group = 'com.messente.api'
version = '4.1.0'

ext {
    jakarta_annotation_version = "1.3.5"
}

dependencies {
    implementation 'io.swagger:swagger-annotations:1.6.5'
    implementation "com.google.code.findbugs:jsr305:3.0.2"
    implementation 'com.squareup.okhttp3:okhttp:4.9.3'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.3'
    implementation 'com.google.code.gson:gson:2.9.0'
    implementation 'io.gsonfire:gson-fire:1.8.5'
    implementation 'javax.ws.rs:jsr311-api:1.1.1'
    implementation 'javax.ws.rs:javax.ws.rs-api:2.1.1'
    implementation 'org.openapitools:jackson-databind-nullable:0.2.3'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'
    implementation "jakarta.annotation:jakarta.annotation-api:$jakarta_annotation_version"
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testImplementation 'org.mockito:mockito-core:3.12.4'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifactId = 'messente-api'

            pom {
                name = "messente-api"
                description = "Messente API - Connecting Services to People"
                url = "https://github.com/messente/messente-api-java"
                inceptionYear = "2019"
                licenses {
                    license {
                        name = "The Apache Software License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                        distribution = "repo"
                    }
                }
                developers {
                    developer {
                        id = "messente"
                        name = "Messente Communications OU"
                        email = "developers@messente.com"
                    }
                }
                scm {
                    connection = "scm:https://github.com/messente/messente-api-java.git"
                    developerConnection = "scm:git@github.com:messente/messente-api-java.git"
                    url = "https://github.com/messente/messente-api-java"
                }
            }
        }
    }
    repositories {
        mavenCentral()
    }
}

nexusPublishing {
    repositories {
        sonatype()
    }
}

def skipSigning = project.hasProperty('skipSigning')

// Configure signing only if skipSigning property is not set
if (!skipSigning) {
    signing {
        sign publishing.publications.mavenJava
    }
}

repositories {
    mavenCentral()
}

sourceSets {
    main.java.srcDirs = ['src/main/java']
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    withJavadocJar()
    withSourcesJar()
}

javadoc {
    options.tags = [ "http.response.details:a:Http Response Details" ]
    options.addStringOption('Xdoclint:none', '-quiet')
}

// Use spotless plugin to automatically format code, remove unused import, etc
// To apply changes directly to the file, run `gradlew spotlessApply`
// Ref: https://github.com/diffplug/spotless/tree/main/plugin-gradle
spotless {
    // comment out below to run spotless as part of the `check` task
    enforceCheck false

    format 'misc', {
        // define the files (e.g. '*.gradle', '*.md') to apply `misc` to
        target '.gitignore'

        // define the steps to apply to those files
        trimTrailingWhitespace()
        indentWithSpaces() // Takes an integer argument if you don't like 4
        endWithNewline()
    }
    java {
        // don't need to set target, it is inferred from java

        // apply a specific flavor of google-java-format
        googleJavaFormat('1.8').aosp().reflowLongStrings()

        removeUnusedImports()
        importOrder()
    }
}
