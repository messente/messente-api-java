/*
 * Messente API
 * [Messente](https://messente.com) is a global provider of messaging and user verification services.  * Send and receive SMS, Viber, WhatsApp and Telegram messages. * Manage contacts and groups. * Fetch detailed info about phone numbers. * Blacklist phone numbers to make sure you're not sending any unwanted messages.  Messente builds [tools](https://messente.com/documentation) to help organizations connect their services to people anywhere in the world.
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: messente@messente.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.messente.api;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.messente.JSON;

/**
 * Report for one country
 */
@ApiModel(description = "Report for one country")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class StatisticsReport {
  public static final String SERIALIZED_NAME_TOTAL_MESSAGES = "total_messages";
  @SerializedName(SERIALIZED_NAME_TOTAL_MESSAGES)
  private Integer totalMessages;

  public static final String SERIALIZED_NAME_TOTAL_PRICE = "total_price";
  @SerializedName(SERIALIZED_NAME_TOTAL_PRICE)
  private String totalPrice;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public StatisticsReport() { 
  }

  public StatisticsReport totalMessages(Integer totalMessages) {
    
    this.totalMessages = totalMessages;
    return this;
  }

   /**
   * Sum of all messages
   * @return totalMessages
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Sum of all messages")

  public Integer getTotalMessages() {
    return totalMessages;
  }


  public void setTotalMessages(Integer totalMessages) {
    this.totalMessages = totalMessages;
  }


  public StatisticsReport totalPrice(String totalPrice) {
    
    this.totalPrice = totalPrice;
    return this;
  }

   /**
   * Price for all messages
   * @return totalPrice
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Price for all messages")

  public String getTotalPrice() {
    return totalPrice;
  }


  public void setTotalPrice(String totalPrice) {
    this.totalPrice = totalPrice;
  }


  public StatisticsReport country(String country) {
    
    this.country = country;
    return this;
  }

   /**
   * Target country of all messages
   * @return country
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Target country of all messages")

  public String getCountry() {
    return country;
  }


  public void setCountry(String country) {
    this.country = country;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StatisticsReport statisticsReport = (StatisticsReport) o;
    return Objects.equals(this.totalMessages, statisticsReport.totalMessages) &&
        Objects.equals(this.totalPrice, statisticsReport.totalPrice) &&
        Objects.equals(this.country, statisticsReport.country);
  }

  @Override
  public int hashCode() {
    return Objects.hash(totalMessages, totalPrice, country);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StatisticsReport {\n");
    sb.append("    totalMessages: ").append(toIndentedString(totalMessages)).append("\n");
    sb.append("    totalPrice: ").append(toIndentedString(totalPrice)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("total_messages");
    openapiFields.add("total_price");
    openapiFields.add("country");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("total_messages");
    openapiRequiredFields.add("total_price");
    openapiRequiredFields.add("country");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to StatisticsReport
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (StatisticsReport.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in StatisticsReport is not found in the empty JSON string", StatisticsReport.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!StatisticsReport.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StatisticsReport` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StatisticsReport.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("total_price") != null && !jsonObj.get("total_price").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `total_price` to be a primitive type in the JSON string but got `%s`", jsonObj.get("total_price").toString()));
      }
      if (jsonObj.get("country") != null && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StatisticsReport.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StatisticsReport' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StatisticsReport> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StatisticsReport.class));

       return (TypeAdapter<T>) new TypeAdapter<StatisticsReport>() {
           @Override
           public void write(JsonWriter out, StatisticsReport value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StatisticsReport read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of StatisticsReport given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of StatisticsReport
  * @throws IOException if the JSON string is invalid with respect to StatisticsReport
  */
  public static StatisticsReport fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StatisticsReport.class);
  }

 /**
  * Convert an instance of StatisticsReport to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

