/*
 * Messente API
 * [Messente](https://messente.com) is a global provider of messaging and user verification services.  * Send and receive SMS, Viber, WhatsApp and Telegram messages. * Manage contacts and groups. * Fetch detailed info about phone numbers. * Blacklist phone numbers to make sure you're not sending any unwanted messages.  Messente builds [tools](https://messente.com/documentation) to help organizations connect their services to people anywhere in the world.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: messente@messente.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.messente.api;

import com.messente.ApiCallback;
import com.messente.ApiClient;
import com.messente.ApiException;
import com.messente.ApiResponse;
import com.messente.Configuration;
import com.messente.Pair;
import com.messente.ProgressRequestBody;
import com.messente.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NumberVerificationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public NumberVerificationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NumberVerificationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for verifyNumber
     * @param username The API username (required)
     * @param password The API password (required)
     * @param to Receiver&#39;s phone number with the country code (required)
     * @param template Template of the message, including PIN code. Placeholder for PIN code is &lt;PIN&gt;. When not set, default template is used: \&quot;Your Verification PIN code is &lt;PIN&gt;\&quot;.  (optional)
     * @param pinLength Length of the PIN code. Minumum 4 digits, maximum 16. Defaults to 4. (optional)
     * @param from Sender name. When not set, the default Sender name \&quot;Verigator\&quot; is used. This sender ID also needs to be added to your account beforehand. (optional)
     * @param maxTries Maximum number of times the PIN code is sent in total. Defaults to \&quot;2\&quot; - initial PIN code and one retry. It is discouraged to set this value to \&quot;1\&quot; as only the initial PIN code is sent and retry is disabled.   (optional)
     * @param retryDelay For how long (in seconds) to wait for next retry, if the correct PIN code has not been entered yet? Defaults to 30 seconds. (optional)
     * @param validity For how long (in seconds) is the PIN code valid. Defaults to 5 minutes (300 seconds). Maximum 30 minutes (1800 seconds). (optional)
     * @param ip IP address of the client making verification request. (optional)
     * @param browser User Agent of the browser. For example \&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.130 Safari/537.36\&quot;. (optional)
     * @param cookie Unique cookie assigned to this session. If a user tries logging in with the same cookie present, user is automatically logged in and no PIN code verification is needed. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Both errors and success responses are returned as plain text with HTTP status 200. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyNumberCall(String username, String password, String to, String template, String pinLength, String from, String maxTries, String retryDelay, String validity, String ip, String browser, String cookie, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api2.messente.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/verify/start";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (password != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("password", password));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (template != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("template", template));
        }

        if (pinLength != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pin_length", pinLength));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (maxTries != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_tries", maxTries));
        }

        if (retryDelay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("retry_delay", retryDelay));
        }

        if (validity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("validity", validity));
        }

        if (ip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ip", ip));
        }

        if (browser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("browser", browser));
        }

        if (cookie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cookie", cookie));
        }

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiPassword", "apiUsername" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyNumberValidateBeforeCall(String username, String password, String to, String template, String pinLength, String from, String maxTries, String retryDelay, String validity, String ip, String browser, String cookie, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling verifyNumber(Async)");
        }

        // verify the required parameter 'password' is set
        if (password == null) {
            throw new ApiException("Missing the required parameter 'password' when calling verifyNumber(Async)");
        }

        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling verifyNumber(Async)");
        }

        return verifyNumberCall(username, password, to, template, pinLength, from, maxTries, retryDelay, validity, ip, browser, cookie, _callback);

    }

    /**
     * verify number
     * 
     * @param username The API username (required)
     * @param password The API password (required)
     * @param to Receiver&#39;s phone number with the country code (required)
     * @param template Template of the message, including PIN code. Placeholder for PIN code is &lt;PIN&gt;. When not set, default template is used: \&quot;Your Verification PIN code is &lt;PIN&gt;\&quot;.  (optional)
     * @param pinLength Length of the PIN code. Minumum 4 digits, maximum 16. Defaults to 4. (optional)
     * @param from Sender name. When not set, the default Sender name \&quot;Verigator\&quot; is used. This sender ID also needs to be added to your account beforehand. (optional)
     * @param maxTries Maximum number of times the PIN code is sent in total. Defaults to \&quot;2\&quot; - initial PIN code and one retry. It is discouraged to set this value to \&quot;1\&quot; as only the initial PIN code is sent and retry is disabled.   (optional)
     * @param retryDelay For how long (in seconds) to wait for next retry, if the correct PIN code has not been entered yet? Defaults to 30 seconds. (optional)
     * @param validity For how long (in seconds) is the PIN code valid. Defaults to 5 minutes (300 seconds). Maximum 30 minutes (1800 seconds). (optional)
     * @param ip IP address of the client making verification request. (optional)
     * @param browser User Agent of the browser. For example \&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.130 Safari/537.36\&quot;. (optional)
     * @param cookie Unique cookie assigned to this session. If a user tries logging in with the same cookie present, user is automatically logged in and no PIN code verification is needed. (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Both errors and success responses are returned as plain text with HTTP status 200. </td><td>  -  </td></tr>
     </table>
     */
    public String verifyNumber(String username, String password, String to, String template, String pinLength, String from, String maxTries, String retryDelay, String validity, String ip, String browser, String cookie) throws ApiException {
        ApiResponse<String> localVarResp = verifyNumberWithHttpInfo(username, password, to, template, pinLength, from, maxTries, retryDelay, validity, ip, browser, cookie);
        return localVarResp.getData();
    }

    /**
     * verify number
     * 
     * @param username The API username (required)
     * @param password The API password (required)
     * @param to Receiver&#39;s phone number with the country code (required)
     * @param template Template of the message, including PIN code. Placeholder for PIN code is &lt;PIN&gt;. When not set, default template is used: \&quot;Your Verification PIN code is &lt;PIN&gt;\&quot;.  (optional)
     * @param pinLength Length of the PIN code. Minumum 4 digits, maximum 16. Defaults to 4. (optional)
     * @param from Sender name. When not set, the default Sender name \&quot;Verigator\&quot; is used. This sender ID also needs to be added to your account beforehand. (optional)
     * @param maxTries Maximum number of times the PIN code is sent in total. Defaults to \&quot;2\&quot; - initial PIN code and one retry. It is discouraged to set this value to \&quot;1\&quot; as only the initial PIN code is sent and retry is disabled.   (optional)
     * @param retryDelay For how long (in seconds) to wait for next retry, if the correct PIN code has not been entered yet? Defaults to 30 seconds. (optional)
     * @param validity For how long (in seconds) is the PIN code valid. Defaults to 5 minutes (300 seconds). Maximum 30 minutes (1800 seconds). (optional)
     * @param ip IP address of the client making verification request. (optional)
     * @param browser User Agent of the browser. For example \&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.130 Safari/537.36\&quot;. (optional)
     * @param cookie Unique cookie assigned to this session. If a user tries logging in with the same cookie present, user is automatically logged in and no PIN code verification is needed. (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Both errors and success responses are returned as plain text with HTTP status 200. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> verifyNumberWithHttpInfo(String username, String password, String to, String template, String pinLength, String from, String maxTries, String retryDelay, String validity, String ip, String browser, String cookie) throws ApiException {
        okhttp3.Call localVarCall = verifyNumberValidateBeforeCall(username, password, to, template, pinLength, from, maxTries, retryDelay, validity, ip, browser, cookie, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * verify number (asynchronously)
     * 
     * @param username The API username (required)
     * @param password The API password (required)
     * @param to Receiver&#39;s phone number with the country code (required)
     * @param template Template of the message, including PIN code. Placeholder for PIN code is &lt;PIN&gt;. When not set, default template is used: \&quot;Your Verification PIN code is &lt;PIN&gt;\&quot;.  (optional)
     * @param pinLength Length of the PIN code. Minumum 4 digits, maximum 16. Defaults to 4. (optional)
     * @param from Sender name. When not set, the default Sender name \&quot;Verigator\&quot; is used. This sender ID also needs to be added to your account beforehand. (optional)
     * @param maxTries Maximum number of times the PIN code is sent in total. Defaults to \&quot;2\&quot; - initial PIN code and one retry. It is discouraged to set this value to \&quot;1\&quot; as only the initial PIN code is sent and retry is disabled.   (optional)
     * @param retryDelay For how long (in seconds) to wait for next retry, if the correct PIN code has not been entered yet? Defaults to 30 seconds. (optional)
     * @param validity For how long (in seconds) is the PIN code valid. Defaults to 5 minutes (300 seconds). Maximum 30 minutes (1800 seconds). (optional)
     * @param ip IP address of the client making verification request. (optional)
     * @param browser User Agent of the browser. For example \&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.130 Safari/537.36\&quot;. (optional)
     * @param cookie Unique cookie assigned to this session. If a user tries logging in with the same cookie present, user is automatically logged in and no PIN code verification is needed. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Both errors and success responses are returned as plain text with HTTP status 200. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyNumberAsync(String username, String password, String to, String template, String pinLength, String from, String maxTries, String retryDelay, String validity, String ip, String browser, String cookie, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyNumberValidateBeforeCall(username, password, to, template, pinLength, from, maxTries, retryDelay, validity, ip, browser, cookie, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verifyPin
     * @param username The API username (required)
     * @param password The API password (required)
     * @param verificationId Verification ID returned by the successful verification request. (required)
     * @param pin PIN code entered by the user. (required)
     * @param ip IP address of the client making verification request. If the IP address is from another country, PIN is required even if the cookies match. (optional)
     * @param browser User Agent of the browser. For example \&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.130 Safari/537.36\&quot;. (optional)
     * @param cookie Unique cookie assigned to this session. If a user tries logging in with the same cookie present, user is automatically logged in and no PIN code verification is needed. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Both errors and success responses are returned as plain text with HTTP status 200. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyPinCall(String username, String password, String verificationId, String pin, String ip, String browser, String cookie, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api2.messente.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/verify/pin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (password != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("password", password));
        }

        if (verificationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("verification_id", verificationId));
        }

        if (pin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pin", pin));
        }

        if (ip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ip", ip));
        }

        if (browser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("browser", browser));
        }

        if (cookie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cookie", cookie));
        }

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiPassword", "apiUsername" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyPinValidateBeforeCall(String username, String password, String verificationId, String pin, String ip, String browser, String cookie, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling verifyPin(Async)");
        }

        // verify the required parameter 'password' is set
        if (password == null) {
            throw new ApiException("Missing the required parameter 'password' when calling verifyPin(Async)");
        }

        // verify the required parameter 'verificationId' is set
        if (verificationId == null) {
            throw new ApiException("Missing the required parameter 'verificationId' when calling verifyPin(Async)");
        }

        // verify the required parameter 'pin' is set
        if (pin == null) {
            throw new ApiException("Missing the required parameter 'pin' when calling verifyPin(Async)");
        }

        return verifyPinCall(username, password, verificationId, pin, ip, browser, cookie, _callback);

    }

    /**
     * verified the PIN code entered by the user.
     * 
     * @param username The API username (required)
     * @param password The API password (required)
     * @param verificationId Verification ID returned by the successful verification request. (required)
     * @param pin PIN code entered by the user. (required)
     * @param ip IP address of the client making verification request. If the IP address is from another country, PIN is required even if the cookies match. (optional)
     * @param browser User Agent of the browser. For example \&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.130 Safari/537.36\&quot;. (optional)
     * @param cookie Unique cookie assigned to this session. If a user tries logging in with the same cookie present, user is automatically logged in and no PIN code verification is needed. (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Both errors and success responses are returned as plain text with HTTP status 200. </td><td>  -  </td></tr>
     </table>
     */
    public String verifyPin(String username, String password, String verificationId, String pin, String ip, String browser, String cookie) throws ApiException {
        ApiResponse<String> localVarResp = verifyPinWithHttpInfo(username, password, verificationId, pin, ip, browser, cookie);
        return localVarResp.getData();
    }

    /**
     * verified the PIN code entered by the user.
     * 
     * @param username The API username (required)
     * @param password The API password (required)
     * @param verificationId Verification ID returned by the successful verification request. (required)
     * @param pin PIN code entered by the user. (required)
     * @param ip IP address of the client making verification request. If the IP address is from another country, PIN is required even if the cookies match. (optional)
     * @param browser User Agent of the browser. For example \&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.130 Safari/537.36\&quot;. (optional)
     * @param cookie Unique cookie assigned to this session. If a user tries logging in with the same cookie present, user is automatically logged in and no PIN code verification is needed. (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Both errors and success responses are returned as plain text with HTTP status 200. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> verifyPinWithHttpInfo(String username, String password, String verificationId, String pin, String ip, String browser, String cookie) throws ApiException {
        okhttp3.Call localVarCall = verifyPinValidateBeforeCall(username, password, verificationId, pin, ip, browser, cookie, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * verified the PIN code entered by the user. (asynchronously)
     * 
     * @param username The API username (required)
     * @param password The API password (required)
     * @param verificationId Verification ID returned by the successful verification request. (required)
     * @param pin PIN code entered by the user. (required)
     * @param ip IP address of the client making verification request. If the IP address is from another country, PIN is required even if the cookies match. (optional)
     * @param browser User Agent of the browser. For example \&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.130 Safari/537.36\&quot;. (optional)
     * @param cookie Unique cookie assigned to this session. If a user tries logging in with the same cookie present, user is automatically logged in and no PIN code verification is needed. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Both errors and success responses are returned as plain text with HTTP status 200. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyPinAsync(String username, String password, String verificationId, String pin, String ip, String browser, String cookie, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyPinValidateBeforeCall(username, password, verificationId, pin, ip, browser, cookie, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
