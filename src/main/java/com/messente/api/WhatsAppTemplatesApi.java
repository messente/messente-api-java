/*
 * Messente API
 * [Messente](https://messente.com) is a global provider of messaging and user verification services.  * Send and receive SMS, Viber, WhatsApp and Telegram messages. * Manage contacts and groups. * Fetch detailed info about phone numbers. * Blacklist phone numbers to make sure you're not sending any unwanted messages.  Messente builds [tools](https://messente.com/documentation) to help organizations connect their services to people anywhere in the world.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: messente@messente.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.messente.api;

import com.messente.ApiCallback;
import com.messente.ApiClient;
import com.messente.ApiException;
import com.messente.ApiResponse;
import com.messente.Configuration;
import com.messente.Pair;
import com.messente.ProgressRequestBody;
import com.messente.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.messente.api.ErrorOmnichannel;
import com.messente.api.WhatsappCreateTemplateRequest;
import com.messente.api.WhatsappCreateTemplateResponse;
import com.messente.api.WhatsappListTemplatesResponse;
import com.messente.api.WhatsappTemplateCategory;
import com.messente.api.WhatsappTemplateResponse;
import com.messente.api.WhatsappTemplateStatus;
import com.messente.api.WhatsappUpdateTemplateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WhatsAppTemplatesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WhatsAppTemplatesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WhatsAppTemplatesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createWhatsappTemplate
     * @param wabaId The ID of the WABA (required)
     * @param whatsappCreateTemplateRequest The WhatsApp template to create (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createWhatsappTemplateCall(String wabaId, WhatsappCreateTemplateRequest whatsappCreateTemplateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = whatsappCreateTemplateRequest;

        // create path and map variables
        String localVarPath = "/whatsapp/wabas/{wabaId}/templates"
            .replace("{" + "wabaId" + "}", localVarApiClient.escapeString(wabaId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createWhatsappTemplateValidateBeforeCall(String wabaId, WhatsappCreateTemplateRequest whatsappCreateTemplateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'wabaId' is set
        if (wabaId == null) {
            throw new ApiException("Missing the required parameter 'wabaId' when calling createWhatsappTemplate(Async)");
        }

        // verify the required parameter 'whatsappCreateTemplateRequest' is set
        if (whatsappCreateTemplateRequest == null) {
            throw new ApiException("Missing the required parameter 'whatsappCreateTemplateRequest' when calling createWhatsappTemplate(Async)");
        }

        return createWhatsappTemplateCall(wabaId, whatsappCreateTemplateRequest, _callback);

    }

    /**
     * Creates a WhatsApp template
     * 
     * @param wabaId The ID of the WABA (required)
     * @param whatsappCreateTemplateRequest The WhatsApp template to create (required)
     * @return WhatsappCreateTemplateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public WhatsappCreateTemplateResponse createWhatsappTemplate(String wabaId, WhatsappCreateTemplateRequest whatsappCreateTemplateRequest) throws ApiException {
        ApiResponse<WhatsappCreateTemplateResponse> localVarResp = createWhatsappTemplateWithHttpInfo(wabaId, whatsappCreateTemplateRequest);
        return localVarResp.getData();
    }

    /**
     * Creates a WhatsApp template
     * 
     * @param wabaId The ID of the WABA (required)
     * @param whatsappCreateTemplateRequest The WhatsApp template to create (required)
     * @return ApiResponse&lt;WhatsappCreateTemplateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WhatsappCreateTemplateResponse> createWhatsappTemplateWithHttpInfo(String wabaId, WhatsappCreateTemplateRequest whatsappCreateTemplateRequest) throws ApiException {
        okhttp3.Call localVarCall = createWhatsappTemplateValidateBeforeCall(wabaId, whatsappCreateTemplateRequest, null);
        Type localVarReturnType = new TypeToken<WhatsappCreateTemplateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a WhatsApp template (asynchronously)
     * 
     * @param wabaId The ID of the WABA (required)
     * @param whatsappCreateTemplateRequest The WhatsApp template to create (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createWhatsappTemplateAsync(String wabaId, WhatsappCreateTemplateRequest whatsappCreateTemplateRequest, final ApiCallback<WhatsappCreateTemplateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createWhatsappTemplateValidateBeforeCall(wabaId, whatsappCreateTemplateRequest, _callback);
        Type localVarReturnType = new TypeToken<WhatsappCreateTemplateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteWhatsappTemplate
     * @param wabaId The ID of the WABA (required)
     * @param name The name of the template to delete (required)
     * @param hsmId The ID of the template to delete (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteWhatsappTemplateCall(String wabaId, String name, String hsmId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/whatsapp/wabas/{wabaId}/templates"
            .replace("{" + "wabaId" + "}", localVarApiClient.escapeString(wabaId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (hsmId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hsmId", hsmId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteWhatsappTemplateValidateBeforeCall(String wabaId, String name, String hsmId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'wabaId' is set
        if (wabaId == null) {
            throw new ApiException("Missing the required parameter 'wabaId' when calling deleteWhatsappTemplate(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteWhatsappTemplate(Async)");
        }

        return deleteWhatsappTemplateCall(wabaId, name, hsmId, _callback);

    }

    /**
     * Deletes a WhatsApp template
     * 
     * @param wabaId The ID of the WABA (required)
     * @param name The name of the template to delete (required)
     * @param hsmId The ID of the template to delete (optional)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Object> deleteWhatsappTemplate(String wabaId, String name, String hsmId) throws ApiException {
        ApiResponse<Map<String, Object>> localVarResp = deleteWhatsappTemplateWithHttpInfo(wabaId, name, hsmId);
        return localVarResp.getData();
    }

    /**
     * Deletes a WhatsApp template
     * 
     * @param wabaId The ID of the WABA (required)
     * @param name The name of the template to delete (required)
     * @param hsmId The ID of the template to delete (optional)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Object>> deleteWhatsappTemplateWithHttpInfo(String wabaId, String name, String hsmId) throws ApiException {
        okhttp3.Call localVarCall = deleteWhatsappTemplateValidateBeforeCall(wabaId, name, hsmId, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes a WhatsApp template (asynchronously)
     * 
     * @param wabaId The ID of the WABA (required)
     * @param name The name of the template to delete (required)
     * @param hsmId The ID of the template to delete (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteWhatsappTemplateAsync(String wabaId, String name, String hsmId, final ApiCallback<Map<String, Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteWhatsappTemplateValidateBeforeCall(wabaId, name, hsmId, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getWhatsappTemplateById
     * @param wabaId The ID of the WABA (required)
     * @param templateId The ID of the template to retrieve (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWhatsappTemplateByIdCall(String wabaId, String templateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/whatsapp/wabas/{wabaId}/templates/{templateId}"
            .replace("{" + "wabaId" + "}", localVarApiClient.escapeString(wabaId.toString()))
            .replace("{" + "templateId" + "}", localVarApiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWhatsappTemplateByIdValidateBeforeCall(String wabaId, String templateId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'wabaId' is set
        if (wabaId == null) {
            throw new ApiException("Missing the required parameter 'wabaId' when calling getWhatsappTemplateById(Async)");
        }

        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling getWhatsappTemplateById(Async)");
        }

        return getWhatsappTemplateByIdCall(wabaId, templateId, _callback);

    }

    /**
     * Requests a WhatsApp template with the given ID
     * 
     * @param wabaId The ID of the WABA (required)
     * @param templateId The ID of the template to retrieve (required)
     * @return WhatsappTemplateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public WhatsappTemplateResponse getWhatsappTemplateById(String wabaId, String templateId) throws ApiException {
        ApiResponse<WhatsappTemplateResponse> localVarResp = getWhatsappTemplateByIdWithHttpInfo(wabaId, templateId);
        return localVarResp.getData();
    }

    /**
     * Requests a WhatsApp template with the given ID
     * 
     * @param wabaId The ID of the WABA (required)
     * @param templateId The ID of the template to retrieve (required)
     * @return ApiResponse&lt;WhatsappTemplateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WhatsappTemplateResponse> getWhatsappTemplateByIdWithHttpInfo(String wabaId, String templateId) throws ApiException {
        okhttp3.Call localVarCall = getWhatsappTemplateByIdValidateBeforeCall(wabaId, templateId, null);
        Type localVarReturnType = new TypeToken<WhatsappTemplateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Requests a WhatsApp template with the given ID (asynchronously)
     * 
     * @param wabaId The ID of the WABA (required)
     * @param templateId The ID of the template to retrieve (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWhatsappTemplateByIdAsync(String wabaId, String templateId, final ApiCallback<WhatsappTemplateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWhatsappTemplateByIdValidateBeforeCall(wabaId, templateId, _callback);
        Type localVarReturnType = new TypeToken<WhatsappTemplateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listWhatsappTemplates
     * @param wabaId The ID of the WABA (required)
     * @param limit The number of templates to return in the list. Although the max size is 500, for large datasets it is recommended to use a lower limit and instead use pagination to avoid potential timeouts. Defaults to 25. (optional, default to 25)
     * @param before A cursor point used for a paginated request to indicate the template to paginate backwards from. (optional)
     * @param after A cursor point used for a paginated request to indicate the template to paginate forwards from. (optional)
     * @param category A filter for returning only templates matching a specific category. (optional)
     * @param content A search filter representing the content of a template. Only matching templates will be returned in the list. (optional)
     * @param language A filter  for returning only templates matching a specific language code. A list of supported languages is available in the [WhatsApp documentation](https://developers.facebook.com/docs/whatsapp/api/messages/message-templates/)  (optional)
     * @param name A search filter representing the name, either full or partial, of a template. Only matching templates will be returned in the list. (optional)
     * @param status A filter for returning only templates matching a specific status. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listWhatsappTemplatesCall(String wabaId, Integer limit, String before, String after, WhatsappTemplateCategory category, String content, String language, String name, WhatsappTemplateStatus status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/whatsapp/wabas/{wabaId}/templates"
            .replace("{" + "wabaId" + "}", localVarApiClient.escapeString(wabaId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (category != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category", category));
        }

        if (content != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content", content));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listWhatsappTemplatesValidateBeforeCall(String wabaId, Integer limit, String before, String after, WhatsappTemplateCategory category, String content, String language, String name, WhatsappTemplateStatus status, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'wabaId' is set
        if (wabaId == null) {
            throw new ApiException("Missing the required parameter 'wabaId' when calling listWhatsappTemplates(Async)");
        }

        return listWhatsappTemplatesCall(wabaId, limit, before, after, category, content, language, name, status, _callback);

    }

    /**
     * Requests a list of WhatsApp templates
     * 
     * @param wabaId The ID of the WABA (required)
     * @param limit The number of templates to return in the list. Although the max size is 500, for large datasets it is recommended to use a lower limit and instead use pagination to avoid potential timeouts. Defaults to 25. (optional, default to 25)
     * @param before A cursor point used for a paginated request to indicate the template to paginate backwards from. (optional)
     * @param after A cursor point used for a paginated request to indicate the template to paginate forwards from. (optional)
     * @param category A filter for returning only templates matching a specific category. (optional)
     * @param content A search filter representing the content of a template. Only matching templates will be returned in the list. (optional)
     * @param language A filter  for returning only templates matching a specific language code. A list of supported languages is available in the [WhatsApp documentation](https://developers.facebook.com/docs/whatsapp/api/messages/message-templates/)  (optional)
     * @param name A search filter representing the name, either full or partial, of a template. Only matching templates will be returned in the list. (optional)
     * @param status A filter for returning only templates matching a specific status. (optional)
     * @return WhatsappListTemplatesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public WhatsappListTemplatesResponse listWhatsappTemplates(String wabaId, Integer limit, String before, String after, WhatsappTemplateCategory category, String content, String language, String name, WhatsappTemplateStatus status) throws ApiException {
        ApiResponse<WhatsappListTemplatesResponse> localVarResp = listWhatsappTemplatesWithHttpInfo(wabaId, limit, before, after, category, content, language, name, status);
        return localVarResp.getData();
    }

    /**
     * Requests a list of WhatsApp templates
     * 
     * @param wabaId The ID of the WABA (required)
     * @param limit The number of templates to return in the list. Although the max size is 500, for large datasets it is recommended to use a lower limit and instead use pagination to avoid potential timeouts. Defaults to 25. (optional, default to 25)
     * @param before A cursor point used for a paginated request to indicate the template to paginate backwards from. (optional)
     * @param after A cursor point used for a paginated request to indicate the template to paginate forwards from. (optional)
     * @param category A filter for returning only templates matching a specific category. (optional)
     * @param content A search filter representing the content of a template. Only matching templates will be returned in the list. (optional)
     * @param language A filter  for returning only templates matching a specific language code. A list of supported languages is available in the [WhatsApp documentation](https://developers.facebook.com/docs/whatsapp/api/messages/message-templates/)  (optional)
     * @param name A search filter representing the name, either full or partial, of a template. Only matching templates will be returned in the list. (optional)
     * @param status A filter for returning only templates matching a specific status. (optional)
     * @return ApiResponse&lt;WhatsappListTemplatesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WhatsappListTemplatesResponse> listWhatsappTemplatesWithHttpInfo(String wabaId, Integer limit, String before, String after, WhatsappTemplateCategory category, String content, String language, String name, WhatsappTemplateStatus status) throws ApiException {
        okhttp3.Call localVarCall = listWhatsappTemplatesValidateBeforeCall(wabaId, limit, before, after, category, content, language, name, status, null);
        Type localVarReturnType = new TypeToken<WhatsappListTemplatesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Requests a list of WhatsApp templates (asynchronously)
     * 
     * @param wabaId The ID of the WABA (required)
     * @param limit The number of templates to return in the list. Although the max size is 500, for large datasets it is recommended to use a lower limit and instead use pagination to avoid potential timeouts. Defaults to 25. (optional, default to 25)
     * @param before A cursor point used for a paginated request to indicate the template to paginate backwards from. (optional)
     * @param after A cursor point used for a paginated request to indicate the template to paginate forwards from. (optional)
     * @param category A filter for returning only templates matching a specific category. (optional)
     * @param content A search filter representing the content of a template. Only matching templates will be returned in the list. (optional)
     * @param language A filter  for returning only templates matching a specific language code. A list of supported languages is available in the [WhatsApp documentation](https://developers.facebook.com/docs/whatsapp/api/messages/message-templates/)  (optional)
     * @param name A search filter representing the name, either full or partial, of a template. Only matching templates will be returned in the list. (optional)
     * @param status A filter for returning only templates matching a specific status. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listWhatsappTemplatesAsync(String wabaId, Integer limit, String before, String after, WhatsappTemplateCategory category, String content, String language, String name, WhatsappTemplateStatus status, final ApiCallback<WhatsappListTemplatesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listWhatsappTemplatesValidateBeforeCall(wabaId, limit, before, after, category, content, language, name, status, _callback);
        Type localVarReturnType = new TypeToken<WhatsappListTemplatesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateWhatsappTemplate
     * @param wabaId The ID of the WABA (required)
     * @param templateId The ID of the template to update (required)
     * @param whatsappUpdateTemplateRequest The template data to be updated (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWhatsappTemplateCall(String wabaId, String templateId, WhatsappUpdateTemplateRequest whatsappUpdateTemplateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = whatsappUpdateTemplateRequest;

        // create path and map variables
        String localVarPath = "/whatsapp/wabas/{wabaId}/templates/{templateId}"
            .replace("{" + "wabaId" + "}", localVarApiClient.escapeString(wabaId.toString()))
            .replace("{" + "templateId" + "}", localVarApiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateWhatsappTemplateValidateBeforeCall(String wabaId, String templateId, WhatsappUpdateTemplateRequest whatsappUpdateTemplateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'wabaId' is set
        if (wabaId == null) {
            throw new ApiException("Missing the required parameter 'wabaId' when calling updateWhatsappTemplate(Async)");
        }

        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling updateWhatsappTemplate(Async)");
        }

        // verify the required parameter 'whatsappUpdateTemplateRequest' is set
        if (whatsappUpdateTemplateRequest == null) {
            throw new ApiException("Missing the required parameter 'whatsappUpdateTemplateRequest' when calling updateWhatsappTemplate(Async)");
        }

        return updateWhatsappTemplateCall(wabaId, templateId, whatsappUpdateTemplateRequest, _callback);

    }

    /**
     * Updates a WhatsApp template
     * 
     * @param wabaId The ID of the WABA (required)
     * @param templateId The ID of the template to update (required)
     * @param whatsappUpdateTemplateRequest The template data to be updated (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Object> updateWhatsappTemplate(String wabaId, String templateId, WhatsappUpdateTemplateRequest whatsappUpdateTemplateRequest) throws ApiException {
        ApiResponse<Map<String, Object>> localVarResp = updateWhatsappTemplateWithHttpInfo(wabaId, templateId, whatsappUpdateTemplateRequest);
        return localVarResp.getData();
    }

    /**
     * Updates a WhatsApp template
     * 
     * @param wabaId The ID of the WABA (required)
     * @param templateId The ID of the template to update (required)
     * @param whatsappUpdateTemplateRequest The template data to be updated (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Object>> updateWhatsappTemplateWithHttpInfo(String wabaId, String templateId, WhatsappUpdateTemplateRequest whatsappUpdateTemplateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateWhatsappTemplateValidateBeforeCall(wabaId, templateId, whatsappUpdateTemplateRequest, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a WhatsApp template (asynchronously)
     * 
     * @param wabaId The ID of the WABA (required)
     * @param templateId The ID of the template to update (required)
     * @param whatsappUpdateTemplateRequest The template data to be updated (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWhatsappTemplateAsync(String wabaId, String templateId, WhatsappUpdateTemplateRequest whatsappUpdateTemplateRequest, final ApiCallback<Map<String, Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateWhatsappTemplateValidateBeforeCall(wabaId, templateId, whatsappUpdateTemplateRequest, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
