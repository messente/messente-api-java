/*
 * Messente API
 * [Messente](https://messente.com) is a global provider of messaging and user verification services.  * Send and receive SMS, Viber, WhatsApp and Telegram messages. * Manage contacts and groups. * Fetch detailed info about phone numbers. * Blacklist phone numbers to make sure you're not sending any unwanted messages.  Messente builds [tools](https://messente.com/documentation) to help organizations connect their services to people anywhere in the world.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: messente@messente.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.messente.api;

import com.messente.ApiCallback;
import com.messente.ApiClient;
import com.messente.ApiException;
import com.messente.ApiResponse;
import com.messente.Configuration;
import com.messente.Pair;
import com.messente.ProgressRequestBody;
import com.messente.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.messente.api.ContactEnvelope;
import com.messente.api.ContactFields;
import com.messente.api.ContactListEnvelope;
import com.messente.api.ContactUpdateFields;
import com.messente.api.ErrorPhonebook;
import com.messente.api.GroupListEnvelope;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ContactsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ContactsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ContactsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addContactToGroup
     * @param groupId String in UUID format (required)
     * @param phone A phone number (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> An empty object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid phone number provided </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Contact or group is missing </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Contact already added to group </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addContactToGroupCall(String groupId, String phone, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/phonebook/groups/{groupId}/contacts/{phone}"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "phone" + "}", localVarApiClient.escapeString(phone.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addContactToGroupValidateBeforeCall(String groupId, String phone, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling addContactToGroup(Async)");
        }

        // verify the required parameter 'phone' is set
        if (phone == null) {
            throw new ApiException("Missing the required parameter 'phone' when calling addContactToGroup(Async)");
        }

        return addContactToGroupCall(groupId, phone, _callback);

    }

    /**
     * Adds a contact to a group
     * 
     * @param groupId String in UUID format (required)
     * @param phone A phone number (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> An empty object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid phone number provided </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Contact or group is missing </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Contact already added to group </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General error </td><td>  -  </td></tr>
     </table>
     */
    public Object addContactToGroup(String groupId, String phone) throws ApiException {
        ApiResponse<Object> localVarResp = addContactToGroupWithHttpInfo(groupId, phone);
        return localVarResp.getData();
    }

    /**
     * Adds a contact to a group
     * 
     * @param groupId String in UUID format (required)
     * @param phone A phone number (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> An empty object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid phone number provided </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Contact or group is missing </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Contact already added to group </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> addContactToGroupWithHttpInfo(String groupId, String phone) throws ApiException {
        okhttp3.Call localVarCall = addContactToGroupValidateBeforeCall(groupId, phone, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds a contact to a group (asynchronously)
     * 
     * @param groupId String in UUID format (required)
     * @param phone A phone number (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> An empty object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid phone number provided </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Contact or group is missing </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Contact already added to group </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addContactToGroupAsync(String groupId, String phone, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = addContactToGroupValidateBeforeCall(groupId, phone, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createContact
     * @param contactFields  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> An object containing a contact object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid phone number provided </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Contact with phone already created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createContactCall(ContactFields contactFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contactFields;

        // create path and map variables
        String localVarPath = "/phonebook/contacts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createContactValidateBeforeCall(ContactFields contactFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contactFields' is set
        if (contactFields == null) {
            throw new ApiException("Missing the required parameter 'contactFields' when calling createContact(Async)");
        }

        return createContactCall(contactFields, _callback);

    }

    /**
     * Creates a new contact
     * 
     * @param contactFields  (required)
     * @return ContactEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> An object containing a contact object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid phone number provided </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Contact with phone already created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General error </td><td>  -  </td></tr>
     </table>
     */
    public ContactEnvelope createContact(ContactFields contactFields) throws ApiException {
        ApiResponse<ContactEnvelope> localVarResp = createContactWithHttpInfo(contactFields);
        return localVarResp.getData();
    }

    /**
     * Creates a new contact
     * 
     * @param contactFields  (required)
     * @return ApiResponse&lt;ContactEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> An object containing a contact object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid phone number provided </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Contact with phone already created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContactEnvelope> createContactWithHttpInfo(ContactFields contactFields) throws ApiException {
        okhttp3.Call localVarCall = createContactValidateBeforeCall(contactFields, null);
        Type localVarReturnType = new TypeToken<ContactEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new contact (asynchronously)
     * 
     * @param contactFields  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> An object containing a contact object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid phone number provided </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Contact with phone already created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createContactAsync(ContactFields contactFields, final ApiCallback<ContactEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = createContactValidateBeforeCall(contactFields, _callback);
        Type localVarReturnType = new TypeToken<ContactEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteContact
     * @param phone A phone number (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Contact deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid phone number provided </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Contact missing </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteContactCall(String phone, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/phonebook/contacts/{phone}"
            .replace("{" + "phone" + "}", localVarApiClient.escapeString(phone.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteContactValidateBeforeCall(String phone, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'phone' is set
        if (phone == null) {
            throw new ApiException("Missing the required parameter 'phone' when calling deleteContact(Async)");
        }

        return deleteContactCall(phone, _callback);

    }

    /**
     * Deletes a contact
     * 
     * @param phone A phone number (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Contact deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid phone number provided </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Contact missing </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteContact(String phone) throws ApiException {
        deleteContactWithHttpInfo(phone);
    }

    /**
     * Deletes a contact
     * 
     * @param phone A phone number (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Contact deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid phone number provided </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Contact missing </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteContactWithHttpInfo(String phone) throws ApiException {
        okhttp3.Call localVarCall = deleteContactValidateBeforeCall(phone, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a contact (asynchronously)
     * 
     * @param phone A phone number (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Contact deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid phone number provided </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Contact missing </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteContactAsync(String phone, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteContactValidateBeforeCall(phone, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchContact
     * @param phone A phone number (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing a contact object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid phone number provided </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Contact missing </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchContactCall(String phone, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/phonebook/contacts/{phone}"
            .replace("{" + "phone" + "}", localVarApiClient.escapeString(phone.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchContactValidateBeforeCall(String phone, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'phone' is set
        if (phone == null) {
            throw new ApiException("Missing the required parameter 'phone' when calling fetchContact(Async)");
        }

        return fetchContactCall(phone, _callback);

    }

    /**
     * Lists a contact
     * 
     * @param phone A phone number (required)
     * @return ContactEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing a contact object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid phone number provided </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Contact missing </td><td>  -  </td></tr>
     </table>
     */
    public ContactEnvelope fetchContact(String phone) throws ApiException {
        ApiResponse<ContactEnvelope> localVarResp = fetchContactWithHttpInfo(phone);
        return localVarResp.getData();
    }

    /**
     * Lists a contact
     * 
     * @param phone A phone number (required)
     * @return ApiResponse&lt;ContactEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing a contact object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid phone number provided </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Contact missing </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContactEnvelope> fetchContactWithHttpInfo(String phone) throws ApiException {
        okhttp3.Call localVarCall = fetchContactValidateBeforeCall(phone, null);
        Type localVarReturnType = new TypeToken<ContactEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists a contact (asynchronously)
     * 
     * @param phone A phone number (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing a contact object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid phone number provided </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Contact missing </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchContactAsync(String phone, final ApiCallback<ContactEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchContactValidateBeforeCall(phone, _callback);
        Type localVarReturnType = new TypeToken<ContactEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchContactGroups
     * @param phone A phone number (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing a list of group objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid phone number provided </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Contact missing </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchContactGroupsCall(String phone, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/phonebook/contacts/{phone}/groups"
            .replace("{" + "phone" + "}", localVarApiClient.escapeString(phone.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchContactGroupsValidateBeforeCall(String phone, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'phone' is set
        if (phone == null) {
            throw new ApiException("Missing the required parameter 'phone' when calling fetchContactGroups(Async)");
        }

        return fetchContactGroupsCall(phone, _callback);

    }

    /**
     * Lists groups of a contact
     * 
     * @param phone A phone number (required)
     * @return GroupListEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing a list of group objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid phone number provided </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Contact missing </td><td>  -  </td></tr>
     </table>
     */
    public GroupListEnvelope fetchContactGroups(String phone) throws ApiException {
        ApiResponse<GroupListEnvelope> localVarResp = fetchContactGroupsWithHttpInfo(phone);
        return localVarResp.getData();
    }

    /**
     * Lists groups of a contact
     * 
     * @param phone A phone number (required)
     * @return ApiResponse&lt;GroupListEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing a list of group objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid phone number provided </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Contact missing </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupListEnvelope> fetchContactGroupsWithHttpInfo(String phone) throws ApiException {
        okhttp3.Call localVarCall = fetchContactGroupsValidateBeforeCall(phone, null);
        Type localVarReturnType = new TypeToken<GroupListEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists groups of a contact (asynchronously)
     * 
     * @param phone A phone number (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing a list of group objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid phone number provided </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Contact missing </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchContactGroupsAsync(String phone, final ApiCallback<GroupListEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchContactGroupsValidateBeforeCall(phone, _callback);
        Type localVarReturnType = new TypeToken<GroupListEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchContacts
     * @param groupIds Optional one or many group id strings in UUID format. For example: \&quot;/contacts?groupIds&#x3D;group_id_one&amp;groupIds&#x3D;group_id_two\&quot;  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing a list of contact objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid \&quot;groupIds\&quot; parameters provided </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchContactsCall(List<String> groupIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/phonebook/contacts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (groupIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "groupIds", groupIds));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchContactsValidateBeforeCall(List<String> groupIds, final ApiCallback _callback) throws ApiException {
        return fetchContactsCall(groupIds, _callback);

    }

    /**
     * Returns all contacts
     * 
     * @param groupIds Optional one or many group id strings in UUID format. For example: \&quot;/contacts?groupIds&#x3D;group_id_one&amp;groupIds&#x3D;group_id_two\&quot;  (optional)
     * @return ContactListEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing a list of contact objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid \&quot;groupIds\&quot; parameters provided </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General error </td><td>  -  </td></tr>
     </table>
     */
    public ContactListEnvelope fetchContacts(List<String> groupIds) throws ApiException {
        ApiResponse<ContactListEnvelope> localVarResp = fetchContactsWithHttpInfo(groupIds);
        return localVarResp.getData();
    }

    /**
     * Returns all contacts
     * 
     * @param groupIds Optional one or many group id strings in UUID format. For example: \&quot;/contacts?groupIds&#x3D;group_id_one&amp;groupIds&#x3D;group_id_two\&quot;  (optional)
     * @return ApiResponse&lt;ContactListEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing a list of contact objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid \&quot;groupIds\&quot; parameters provided </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContactListEnvelope> fetchContactsWithHttpInfo(List<String> groupIds) throws ApiException {
        okhttp3.Call localVarCall = fetchContactsValidateBeforeCall(groupIds, null);
        Type localVarReturnType = new TypeToken<ContactListEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns all contacts (asynchronously)
     * 
     * @param groupIds Optional one or many group id strings in UUID format. For example: \&quot;/contacts?groupIds&#x3D;group_id_one&amp;groupIds&#x3D;group_id_two\&quot;  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing a list of contact objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid \&quot;groupIds\&quot; parameters provided </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchContactsAsync(List<String> groupIds, final ApiCallback<ContactListEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchContactsValidateBeforeCall(groupIds, _callback);
        Type localVarReturnType = new TypeToken<ContactListEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeContactFromGroup
     * @param groupId String in UUID format (required)
     * @param phone A phone number (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Contact removed from group </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid phone number provided </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Contact or group is missing or contact is missing from group </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeContactFromGroupCall(String groupId, String phone, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/phonebook/groups/{groupId}/contacts/{phone}"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "phone" + "}", localVarApiClient.escapeString(phone.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeContactFromGroupValidateBeforeCall(String groupId, String phone, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling removeContactFromGroup(Async)");
        }

        // verify the required parameter 'phone' is set
        if (phone == null) {
            throw new ApiException("Missing the required parameter 'phone' when calling removeContactFromGroup(Async)");
        }

        return removeContactFromGroupCall(groupId, phone, _callback);

    }

    /**
     * Removes a contact from a group
     * 
     * @param groupId String in UUID format (required)
     * @param phone A phone number (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Contact removed from group </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid phone number provided </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Contact or group is missing or contact is missing from group </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General error </td><td>  -  </td></tr>
     </table>
     */
    public void removeContactFromGroup(String groupId, String phone) throws ApiException {
        removeContactFromGroupWithHttpInfo(groupId, phone);
    }

    /**
     * Removes a contact from a group
     * 
     * @param groupId String in UUID format (required)
     * @param phone A phone number (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Contact removed from group </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid phone number provided </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Contact or group is missing or contact is missing from group </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> removeContactFromGroupWithHttpInfo(String groupId, String phone) throws ApiException {
        okhttp3.Call localVarCall = removeContactFromGroupValidateBeforeCall(groupId, phone, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Removes a contact from a group (asynchronously)
     * 
     * @param groupId String in UUID format (required)
     * @param phone A phone number (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Contact removed from group </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid phone number provided </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Contact or group is missing or contact is missing from group </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeContactFromGroupAsync(String groupId, String phone, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeContactFromGroupValidateBeforeCall(groupId, phone, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateContact
     * @param phone A phone number (required)
     * @param contactUpdateFields  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing a contact object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid phone number or empty patch body or unknown fields provided </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Contact missing </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateContactCall(String phone, ContactUpdateFields contactUpdateFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contactUpdateFields;

        // create path and map variables
        String localVarPath = "/phonebook/contacts/{phone}"
            .replace("{" + "phone" + "}", localVarApiClient.escapeString(phone.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateContactValidateBeforeCall(String phone, ContactUpdateFields contactUpdateFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'phone' is set
        if (phone == null) {
            throw new ApiException("Missing the required parameter 'phone' when calling updateContact(Async)");
        }

        // verify the required parameter 'contactUpdateFields' is set
        if (contactUpdateFields == null) {
            throw new ApiException("Missing the required parameter 'contactUpdateFields' when calling updateContact(Async)");
        }

        return updateContactCall(phone, contactUpdateFields, _callback);

    }

    /**
     * Updates a contact
     * 
     * @param phone A phone number (required)
     * @param contactUpdateFields  (required)
     * @return ContactEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing a contact object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid phone number or empty patch body or unknown fields provided </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Contact missing </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General error </td><td>  -  </td></tr>
     </table>
     */
    public ContactEnvelope updateContact(String phone, ContactUpdateFields contactUpdateFields) throws ApiException {
        ApiResponse<ContactEnvelope> localVarResp = updateContactWithHttpInfo(phone, contactUpdateFields);
        return localVarResp.getData();
    }

    /**
     * Updates a contact
     * 
     * @param phone A phone number (required)
     * @param contactUpdateFields  (required)
     * @return ApiResponse&lt;ContactEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing a contact object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid phone number or empty patch body or unknown fields provided </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Contact missing </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContactEnvelope> updateContactWithHttpInfo(String phone, ContactUpdateFields contactUpdateFields) throws ApiException {
        okhttp3.Call localVarCall = updateContactValidateBeforeCall(phone, contactUpdateFields, null);
        Type localVarReturnType = new TypeToken<ContactEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a contact (asynchronously)
     * 
     * @param phone A phone number (required)
     * @param contactUpdateFields  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing a contact object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid phone number or empty patch body or unknown fields provided </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Contact missing </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateContactAsync(String phone, ContactUpdateFields contactUpdateFields, final ApiCallback<ContactEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateContactValidateBeforeCall(phone, contactUpdateFields, _callback);
        Type localVarReturnType = new TypeToken<ContactEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
