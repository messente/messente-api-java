/*
 * Messente API
 * [Messente](https://messente.com) is a global provider of messaging and user verification services.  * Send and receive SMS, Viber, WhatsApp and Telegram messages. * Manage contacts and groups. * Fetch detailed info about phone numbers. * Blacklist phone numbers to make sure you're not sending any unwanted messages.  Messente builds [tools](https://messente.com/documentation) to help organizations connect their services to people anywhere in the world.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: messente@messente.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.messente.api;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.messente.JSON;

/**
 * Whatsapp currency object.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.6.0")
public class WhatsAppCurrency {
  public static final String SERIALIZED_NAME_FALLBACK_VALUE = "fallback_value";
  @SerializedName(SERIALIZED_NAME_FALLBACK_VALUE)
  private String fallbackValue;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_AMOUNT1000 = "amount_1000";
  @SerializedName(SERIALIZED_NAME_AMOUNT1000)
  private String amount1000;

  public WhatsAppCurrency() {
  }

  public WhatsAppCurrency fallbackValue(String fallbackValue) {
    this.fallbackValue = fallbackValue;
    return this;
  }

   /**
   * Default text if localization fails.
   * @return fallbackValue
  **/
  @javax.annotation.Nonnull
  public String getFallbackValue() {
    return fallbackValue;
  }

  public void setFallbackValue(String fallbackValue) {
    this.fallbackValue = fallbackValue;
  }


  public WhatsAppCurrency code(String code) {
    this.code = code;
    return this;
  }

   /**
   * Currency code as defined in ISO 4217.
   * @return code
  **/
  @javax.annotation.Nonnull
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public WhatsAppCurrency amount1000(String amount1000) {
    this.amount1000 = amount1000;
    return this;
  }

   /**
   * Amount multiplied by 1000.
   * @return amount1000
  **/
  @javax.annotation.Nonnull
  public String getAmount1000() {
    return amount1000;
  }

  public void setAmount1000(String amount1000) {
    this.amount1000 = amount1000;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WhatsAppCurrency whatsAppCurrency = (WhatsAppCurrency) o;
    return Objects.equals(this.fallbackValue, whatsAppCurrency.fallbackValue) &&
        Objects.equals(this.code, whatsAppCurrency.code) &&
        Objects.equals(this.amount1000, whatsAppCurrency.amount1000);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fallbackValue, code, amount1000);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WhatsAppCurrency {\n");
    sb.append("    fallbackValue: ").append(toIndentedString(fallbackValue)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    amount1000: ").append(toIndentedString(amount1000)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fallback_value");
    openapiFields.add("code");
    openapiFields.add("amount_1000");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("fallback_value");
    openapiRequiredFields.add("code");
    openapiRequiredFields.add("amount_1000");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to WhatsAppCurrency
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WhatsAppCurrency.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WhatsAppCurrency is not found in the empty JSON string", WhatsAppCurrency.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WhatsAppCurrency.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WhatsAppCurrency` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WhatsAppCurrency.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("fallback_value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fallback_value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fallback_value").toString()));
      }
      if (!jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if (!jsonObj.get("amount_1000").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amount_1000` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amount_1000").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WhatsAppCurrency.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WhatsAppCurrency' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WhatsAppCurrency> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WhatsAppCurrency.class));

       return (TypeAdapter<T>) new TypeAdapter<WhatsAppCurrency>() {
           @Override
           public void write(JsonWriter out, WhatsAppCurrency value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WhatsAppCurrency read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WhatsAppCurrency given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WhatsAppCurrency
  * @throws IOException if the JSON string is invalid with respect to WhatsAppCurrency
  */
  public static WhatsAppCurrency fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WhatsAppCurrency.class);
  }

 /**
  * Convert an instance of WhatsAppCurrency to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

